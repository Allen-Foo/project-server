# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: users

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs6.10
  profile: tutor_server


# The `functions` block defines what code to deploy
functions:
  register:
    handler: register/handler.register
    # The `events` block defines how to trigger the handler.register code
    events:
      - http:
          path: register
          method: post
          cors: true
          integration: lambda

  login:
    handler: login/handler.login
    # The `events` block defines how to trigger the handler.login code
    events:
      - http:
          path: login
          method: post
          cors: true
          integration: lambda


  upload:
    handler: upload/handler.upload
    # The `events` block defines how to trigger the handler.upload code
    events:
      - http:
          path: upload
          method: post
          cors: true
          integration: lambda

  updateAvatar:
    handler: updateAvatar/handler.updateAvatar
    # The `events` block defines how to trigger the handler.updateAvatar code
    events:
      - http:
          path: updateAvatar
          method: post
          cors: true
          integration: lambda

  updateProfile:
    handler: profile/handler.updateProfile
    # The `events` block defines how to trigger the handler.updateAvatar code
    events:
      - http:
          path: updateProfile
          method: post
          cors: true
          integration: lambda

  addToBookmark:
    handler: history/handler.addToBookmark
    events:
      - http:
          path: addToBookmark/{id}
          method: post
          cors: true
          integration: lambda

  removeFromBookmark:
    handler: history/handler.removeFromBookmark
    events:
      - http:
          path: removeFromBookmark/{id}
          method: post
          cors: true
          integration: lambda
          
  createClass:
    handler: class/handler.createClass
    events:
      - http:
          path: createClass
          method: post
          cors: true
          integration: lambda

  updateClass:
    handler: class/handler.updateClass
    events:
      - http:
          path: updateClass/{id}
          method: post
          cors: true
          integration: lambda

  deleteClass:
    handler: class/handler.deleteClass
    events:
      - http:
          path: deleteClass/{id}
          method: post
          cors: true
          integration: lambda

  getClassList:
    handler: class/handler.getClassList
    events:
      - http:
          path: getClassList
          method: post
          cors: true
          integration: lambda

  getClassDetail:
    handler: class/handler.getClassDetail
    events:
      - http:
          path: getClassDetail/{id}
          method: post
          cors: true
          integration: lambda

  getAllClassList:
    handler: class/handler.getAllClassList
    events:
      - http:
          path: getAllClassList
          method: post
          cors: true
          integration: lambda

  searchClassList:
    handler: class/handler.searchClassList
    events:
      - http:
          path: searchClassList
          method: post
          cors: true
          integration: lambda

  giveComment:
    handler: class/handler.giveComment
    events:
      - http:
          path: giveComment/{id}
          method: post
          cors: true
          integration: lambda

